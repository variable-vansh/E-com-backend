// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())

  // Relations
  orders       Order[]
  createdPromos Promo[] @relation("PromoCreatedBy")
  updatedPromos Promo[] @relation("PromoUpdatedBy")

  @@map("users")
}

model Promo {
  id           Int      @id @default(autoincrement())
  imageUrl     String   @map("image_url") @db.VarChar(500)
  title        String?  @db.VarChar(255)
  description  String?
  isActive     Boolean  @default(true) @map("is_active")
  displayOrder Int      @default(0) @map("display_order")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  createdById  Int?     @map("created_by")
  updatedById  Int?     @map("updated_by")

  // Relations
  createdBy User? @relation("PromoCreatedBy", fields: [createdById], references: [id])
  updatedBy User? @relation("PromoUpdatedBy", fields: [updatedById], references: [id])

  @@index([isActive, displayOrder], map: "idx_promos_active_order")
  @@index([createdAt], map: "idx_promos_created_at")
  @@map("promos")
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  categoryId  Int
  isActive    Boolean @default(true)
  image       String? // Optional image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category      @relation(fields: [categoryId], references: [id])
  inventory   Inventory?
  orderItems  OrderItem[]

  @@map("products")
}

model Grain {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  image       String? // Optional image URL
  nutrition   Json?   // JSON field for nutrition info like {"Protein": "13g", "Fiber": "12g", "Carbs": "71g"}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("grains")
}

model Inventory {
  id               Int @id @default(autoincrement())
  productId        Int @unique
  quantity         Int @default(0)
  reservedQuantity Int @default(0)
  lowStockAlert    Int @default(10)
  updatedAt        DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String?     @unique // Made optional for backwards compatibility
  orderId       String      @unique @default(cuid()) // New unique order ID
  userId        Int?        // Made optional for guest orders
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  
  // Enhanced Customer Details
  customerName  String
  customerEmail String?
  customerPhone String      // Updated field name to match frontend
  phone         String?     // Keep old field for backwards compatibility
  
  // Enhanced Shipping Address
  houseNumber     String?
  street          String?
  shippingAddress String?
  city            String?
  state           String?
  postalCode      String?
  pincode         String?   // Additional pincode field
  fullAddress     String?   // Complete address string
  country         String @default("India")
  
  // Enhanced Pricing Information
  itemTotal       Float?
  deliveryFee     Float?
  discount        Float?
  grandTotal      Float?
  
  // Order Details
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus @default(PENDING)
  orderStatus     OrderStatus @default(CONFIRMED) // New field for enhanced status
  notes           String?
  
  // Timestamps
  orderDate       DateTime @default(now())
  orderTimestamp  DateTime? // Frontend provided timestamp
  shippedDate     DateTime?
  deliveredDate   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user           User?         @relation(fields: [userId], references: [id])
  orderItems     OrderItem[]
  orderMixItems  OrderMixItem[] // New relation for grain mix items

  @@map("orders")
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int
  productId   Int?    // Made optional for cases where product might not exist
  productName String? // Store product name for historical reference
  quantity    Int
  unitPrice   Decimal @db.Decimal(10, 2)
  price       Float?  // Frontend compatible price field
  totalPrice  Decimal @db.Decimal(10, 2)

  // Relations
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model OrderMixItem {
  id          Int   @id @default(autoincrement())
  orderId     Int
  grainId     Int?  // Reference to grain, optional for data integrity
  grainName   String
  quantity    Float // Can be decimal (e.g., 1.5 kg)
  price       Float
  totalPrice  Float
  
  // Relations
  order       Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  @@map("order_mix_items")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SHOPKEEPER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}