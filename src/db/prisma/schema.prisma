// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  email     String   @unique
  role      UserRole @default(CUSTOMER)
  createdAt DateTime @default(now())

  // Relations
  orders Order[]

  @@map("users")
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String
  parentId Int?

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  products Product[]

  @@map("categories")
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  categoryId  Int
  isActive    Boolean @default(true)
  image       String? // Optional image URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category    Category      @relation(fields: [categoryId], references: [id])
  inventory   Inventory?
  orderItems  OrderItem[]

  @@map("products")
}

model Grain {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  price       Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  image       String? // Optional image URL
  nutrition   Json?   // JSON field for nutrition info like {"Protein": "13g", "Fiber": "12g", "Carbs": "71g"}
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("grains")
}

model Inventory {
  id               Int @id @default(autoincrement())
  productId        Int @unique
  quantity         Int @default(0)
  reservedQuantity Int @default(0)
  lowStockAlert    Int @default(10)
  updatedAt        DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("inventory")
}

model Order {
  id            Int         @id @default(autoincrement())
  orderNumber   String      @unique
  userId        Int
  status        OrderStatus @default(PENDING)
  totalAmount   Decimal     @db.Decimal(10, 2)
  
  // Customer Details
  customerName  String
  customerEmail String
  phone         String?
  
  // Shipping Address
  shippingAddress String
  city            String
  state           String
  postalCode      String
  country         String @default("India")
  
  // Order Details
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus @default(PENDING)
  notes           String?
  
  // Timestamps
  orderDate     DateTime @default(now())
  shippedDate   DateTime?
  deliveredDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)
  totalPrice Decimal @db.Decimal(10, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Enums
enum UserRole {
  CUSTOMER
  ADMIN
  SHOPKEEPER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CASH_ON_DELIVERY
  CREDIT_CARD
  DEBIT_CARD
  UPI
  NET_BANKING
  WALLET
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}